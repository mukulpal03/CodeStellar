// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  ADMIN
  USER
}

model User {
  id                      String          @id @default(uuid())
  email                   String          @unique
  username                String          @unique
  password                String
  role                    userRole        @default(USER)
  isVerified              Boolean         @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  refreshToken            String?
  resetPasswordToken      String?
  resetPasswordExpiry     DateTime?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  profile                 UserProfile?
  Problem                 Problem[]
  Submission              Submission[]
  ProblemSolved           ProblemSolved[]
  Sheet                   Sheet[]

  @@map("users")
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  fullName    String?
  bio         String?
  avatar      String?
  country     String?
  githubURL   String?
  linkedinURL String?
  websiteURL  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("user_profiles")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id                String     @id @default(uuid())
  title             String
  slug String? @unique
  description       String
  difficulty        Difficulty @default(EASY)
  tags              String[]
  userId            String
  examples          Json
  constraints       Json
  hints             Json?
  editorial         String?
  testCases         Json
  codeSnippet       Json
  referenceSolution Json
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission     Submission[]
  ProblemSolved  ProblemSolved[]
  ProblemInSheet ProblemInSheet[]

  @@map("problems")
}

enum SubmissionStatus {
  PENDING              
  ACCEPTED            
  WRONG_ANSWER         
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        SubmissionStatus @default(PENDING)
  memory        Int?
  time          Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]

  @@map("submissions")
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String?
  expectedOutput String?
  stderr         String?
  compileOutput  String?
  status         String?
  memory         Int?
  time           Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@map("test_case_results")
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
  @@map("problems_solved")
}

model Sheet {
  id          String   @id @default(uuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  problems ProblemInSheet[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@map("sheets")
}

model ProblemInSheet {
  id        String   @id @default(uuid())
  sheetId   String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Sheet   Sheet   @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([sheetId, problemId])
  @@map("problems_in_sheets")
}
