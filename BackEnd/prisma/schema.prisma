// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  ADMIN
  USER
}

model User {
  id                      String          @id @default(uuid())
  name                    String
  email                   String          @unique
  password                String
  image                   String?
  role                    userRole        @default(USER)
  isVerified              Boolean         @default(false)
  verificationToken       String?
  verificationTokenExpiry DateTime?
  refreshToken            String?
  resetPasswordToken      String?
  resetPasswordExpiry     DateTime?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @default(now())
  Problem                 Problem[]
  Submission              Submission[]
  ProblemSolved           ProblemSolved[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Problem {
  id                String     @id @default(uuid())
  title             String
  description       String
  difficulty        Difficulty @default(EASY)
  tags              String[]
  userId            String
  examples          Json
  constraints       Json
  hints             String?
  editorial         String?
  testCases         Json
  codeSnippet       Json
  referenceSolution Json
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @default(now())

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  submission    Submission[]
  ProblemSolved ProblemSolved[]
}

model Submission {
  id            String   @id @default(uuid())
  userId        String
  problemId     String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionId   String
  testCase       Int
  passed         Boolean
  stdout         String?
  expectedOutput String?
  stderr         String?
  compileOutput  String?
  status         String?
  memory         String?
  time           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}
